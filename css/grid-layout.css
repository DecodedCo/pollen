    /*! ===========================================================
Pollen - Decoded Styles // by Jonas Haefele 2014
============================================================ */

/*
Dimensions Utilities
==========================================

u-sizeFit - Make an element shrink wrap its content by floating left.
u-sizeFitAlt - Make an element shrink wrap its content by floating right.
u-sizeFill - Make an element fill the remaining space.
u-sizeFillAlt - An alternative method to make an element fill the remaining space.
u-sizeFull - Make an element the width of its parent.
u-sizeXofY (numerous) - Specify the proportional width of an object.

X must be an integer less than Y.
Y can be any of the following numbers: 2, 3, 4, 5, 6, 8, 10, 12.

## Plugins

Utilities that can be limited to specific Media Query breakpoints.

v1-u-sizeXofY - To use at the first Media Query breakpoint.
v2-u-sizeXofY - To use at the second Media Query breakpoint.
v3-u-sizeXofY - To use at the third Media Query breakpoint.
etc.

*/

@import "../bower_components/suit-utils-dimension/dimension.css";
@import "../bower_components/suit-utils-dimension/dimension-v1.css" (max-width: 480px);
@import "../bower_components/suit-utils-dimension/dimension-v2.css" (min-width: 480px) and (max-width: 780px);
@import "../bower_components/suit-utils-dimension/dimension-v3.css" (min-width: 780px);

/* 
Layout Helpers
=================================================

u-cf - Contain floats (micro clearfix).
u-nbfc - Create a new block formatting context.
u-nbfcAlt - Create a new block formatting context (alternative technique).
u-pullLeft - Float left.
u-pullRight - Float right.
u-objLeft - The same as u-pullLeft but with 10px of opposite margin, and child image normalization.
u-objRight - The same as u-pullRight but with 10px of opposite margin, and child image normalization.
u-alignTop - Vertically align to top.
u-alignMiddle - Vertically align to middle.
u-alignBaseline -Vertically align to baseline.
u-alignBottom - Vertically align to bottom.

*/

@import "../bower_components/suit-utils-layout/layout.css";

/*
SUIT arrange
===============================================
A SUIT component for horizontally and vertically arranging a single row of cells. Includes modifier classes for equal-width cells and gutter-separated cells. Makes use of CSS table layout.

Arrange - The core component class
Arrange-sizeFit - The child class for cells to snap to fit their content
Arrange-sizeFill - The child class for cells to expand to fill the remaining space
Arrange--middle - The modifier class for middle-aligned cells
Arrange--bottom - The modifier class for bottom-aligned cells
Arrange--equal - The modifier class for equal-width cells

*/

@import "../bower_components/suit-arrange/arrange.css";
    
/* 
Layout and Grids
=====================================================================

The grid is based on SUIT Grud Layout
https://github.com/suitcss/grid-layouts

Layouts are inherited by wider viewports.

## v1: narrow-width viewports (default)

v1-Grid--2col: Split into 2 columns
v1-Grid--3col: Split into 3 columns

## v2: medium-width viewports (>= 25em, defined in sass-variables)

v2-Grid--1col: One column
v2-Grid--2col: Split into 2 columns
v2-Grid--3col: Split into 3 columns
v2-Grid--4col: Split into 4 columns
v2-Grid--1to2: Split into 2 columns, 1:2 ratio (requires 2 cells)
v2-Grid--2to1: Split into 2 columns, 2:1 ratio (requires 2 cells)
v2-Grid--1to3: Split into 2 columns, 1:3 ratio (requires 2 cells)
v2-Grid--3to1: Split into 2 columns, 3:1 ratio (requires 2 cells)
v2-Grid--3on1: Split into 3 columns stacked on 1 column (requires 4 cells)
v2-Grid--fitToFill: Split into 2 columns, fit:fill ratio (requires 2 cells)

## v3: wide-width viewports (>= 50em, defined in sass-variables)

v3-Grid--1col: One column
v3-Grid--2col: Split into 2 columns
v3-Grid--3col: Split into 3 columns
v3-Grid--4col: Split into 4 columns
v3-Grid--1to2: Split into 2 columns, 1:2 ratio (requires 2 cells)
v3-Grid--2to1: Split into 2 columns, 2:1 ratio (requires 2 cells)
v3-Grid--2to3: Split into 2 columns, 2:3 ratio (requires 2 cells)
v3-Grid--3to2: Split into 2 columns, 3:2 ratio (requires 2 cells)


Make make a grid that has two collumns at small sizes and breaks into four columns at medium screen sizes:
```
<div class="Grid v1-Grid--2col v2-Grid--4col">
    <div class="Grid-cell Grid-cell--1">…</div>
    <div class="Grid-cell Grid-cell--2">…</div>
    <div class="Grid-cell Grid-cell--3">…</div>
    <div class="Grid-cell Grid-cell--4">…</div>
</div>
```

The following example is a grid that changes from being a single column of cells by default (at narrow viewports - v1), to two columns (at medium viewports - v2), to 4 columns (at wide viewports - v3):
```
<div class="Grid v2-Grid--2col v3-Grid--4col">
    <div class="Grid-cell Grid-cell--1">…</div>
    <div class="Grid-cell Grid-cell--2">…</div>
    <div class="Grid-cell Grid-cell--3">…</div>
    <div class="Grid-cell Grid-cell--4">…</div>
</div>
```

Nesting grids is easy. Each grid adapts independently of its context. In the follow example, a grid changes from 1 column (narrow) to 2 columns (medium, and wide). A second grid is nested within the first cell of this grid. This nested grid changes from 2 columns (narrow, and medium) to 4 columns (wide) using the same global breakpoints.
```
<!-- outer grid -->
<div class="Grid v2-Grid--2col">
    <div class="Grid-cell Grid-cell--1">
        <!-- inner grid -->
        <div class="Grid v1-Grid--2col v3-Grid--4col">
            <div class="Grid-cell Grid-cell--1">…</div>
            <div class="Grid-cell Grid-cell--2">…</div>
            <div class="Grid-cell Grid-cell--3">…</div>
            <div class="Grid-cell Grid-cell--4">…</div>
        </div>
    </div>
    <div class="Grid-cell Grid-cell--2">
        …
    </div>
</div>
```
*/

@import '../bower_components/suit-grid/grid.css';
@import '../bower_components/suit-grid-layouts/grid-layouts-v1.css';
@import '../bower_components/suit-grid-layouts/grid-layouts-v2.css' (min-width: 480px);
@import '../bower_components/suit-grid-layouts/grid-layouts-v3.css' (min-width: 780px);

/**
* Set application's grid gutter (40px)
*/

.Grid {
    margin: 0 -10px 10px -10px;
}
.Grid--no-padding {
    margin: 0 -20px 0px -20px;
}
.Grid-cell {
    padding: 0 10px;
}
.Grid-cell.Grid {
    padding: 0 0;
}

